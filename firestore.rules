rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can only access their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // Validate user data structure
      allow write: if request.auth != null && 
                   request.auth.uid == userId &&
                   validateUserData(request.resource.data);
    }
    
    // Events - users can only access events they created or are part of a couple
    match /events/{eventId} {
      allow read, write: if request.auth != null && 
                          (resource.data.createdBy == request.auth.uid ||
                           isPartOfCouple(request.auth.uid, resource.data.coupleId));
      
      allow create: if request.auth != null && 
                    request.resource.data.createdBy == request.auth.uid &&
                    validateEventData(request.resource.data);
      
      allow update: if request.auth != null && 
                    (resource.data.createdBy == request.auth.uid ||
                     isPartOfCouple(request.auth.uid, resource.data.coupleId)) &&
                    validateEventData(request.resource.data);
      
      allow delete: if request.auth != null && 
                    (resource.data.createdBy == request.auth.uid ||
                     isPartOfCouple(request.auth.uid, resource.data.coupleId));
    }
    
    // Anniversaries - similar to events but with couple-specific logic
    match /anniversaries/{anniversaryId} {
      allow read, write: if request.auth != null && 
                          (resource.data.createdBy == request.auth.uid ||
                           isPartOfCouple(request.auth.uid, resource.data.coupleId));
      
      allow create: if request.auth != null && 
                    request.resource.data.createdBy == request.auth.uid &&
                    validateAnniversaryData(request.resource.data);
      
      allow update: if request.auth != null && 
                    (resource.data.createdBy == request.auth.uid ||
                     isPartOfCouple(request.auth.uid, resource.data.coupleId)) &&
                    validateAnniversaryData(request.resource.data);
      
      allow delete: if request.auth != null && 
                    (resource.data.createdBy == request.auth.uid ||
                     isPartOfCouple(request.auth.uid, resource.data.coupleId));
    }
    
    // Couple documents - only couple members can access
    match /couples/{coupleId} {
      allow read, write: if request.auth != null && 
                          (resource.data.user1Id == request.auth.uid ||
                           resource.data.user2Id == request.auth.uid);
      
      allow create: if request.auth != null && 
                    (request.resource.data.user1Id == request.auth.uid ||
                     request.resource.data.user2Id == request.auth.uid) &&
                    validateCoupleData(request.resource.data);
      
      allow update: if request.auth != null && 
                    (resource.data.user1Id == request.auth.uid ||
                     resource.data.user2Id == request.auth.uid) &&
                    validateCoupleData(request.resource.data);
      
      allow delete: if request.auth != null && 
                    (resource.data.user1Id == request.auth.uid ||
                     resource.data.user2Id == request.auth.uid);
    }
    
    // Invite codes - temporary access for coupling
    match /invites/{inviteId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                    request.resource.data.createdBy == request.auth.uid &&
                    validateInviteData(request.resource.data);
      allow update: if request.auth != null && 
                    (resource.data.createdBy == request.auth.uid ||
                     request.resource.data.usedBy == request.auth.uid);
      allow delete: if request.auth != null && 
                    resource.data.createdBy == request.auth.uid;
    }
    
    // Helper functions
    function isPartOfCouple(userId, coupleId) {
      return coupleId != null && 
             exists(/databases/$(database)/documents/couples/$(coupleId)) &&
             (get(/databases/$(database)/documents/couples/$(coupleId)).data.user1Id == userId ||
              get(/databases/$(database)/documents/couples/$(coupleId)).data.user2Id == userId);
    }
    
    function validateUserData(data) {
      return data.keys().hasAll(['email', 'name', 'createdAt']) &&
             data.email is string &&
             data.name is string &&
             data.createdAt is timestamp &&
             data.email.matches('.*@.*\\..*');
    }
    
    function validateEventData(data) {
      return data.keys().hasAll(['title', 'date', 'createdBy', 'createdAt']) &&
             data.title is string &&
             data.date is string &&
             data.createdBy is string &&
             data.createdAt is timestamp &&
             data.title.size() > 0 &&
             data.title.size() <= 100 &&
             (data.ownerType == null || data.ownerType in ['mine', 'partner', 'shared']);
    }
    
    function validateAnniversaryData(data) {
      return data.keys().hasAll(['title', 'date', 'createdBy', 'createdAt']) &&
             data.title is string &&
             data.date is string &&
             data.createdBy is string &&
             data.createdAt is timestamp &&
             data.title.size() > 0 &&
             data.title.size() <= 100;
    }
    
    function validateCoupleData(data) {
      return data.keys().hasAll(['user1Id', 'user2Id', 'createdAt']) &&
             data.user1Id is string &&
             data.user2Id is string &&
             data.createdAt is timestamp &&
             data.user1Id != data.user2Id;
    }
    
    function validateInviteData(data) {
      return data.keys().hasAll(['code', 'createdBy', 'createdAt', 'expiresAt']) &&
             data.code is string &&
             data.createdBy is string &&
             data.createdAt is timestamp &&
             data.expiresAt is timestamp &&
             data.code.size() >= 6 &&
             data.code.size() <= 10;
    }
  }
}